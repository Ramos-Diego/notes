# THIS FILE: /etc/nginx/conf.d/yourNginx.conf

# THIS IS A REVERSE PROXY SETUP FOR NGINX USING NODEJS (HTTPS ENABLED)

#                         +---------------------------------+
#                         |              SERVER             |
#                         | +------------- +--------------+ |
#                         | |      HTTP    | static files | |
#                         | |  +---------> +--------------+ |
#                         | v  |                            |
#                    +----+-+--+-+         +--------------+ |
# +--------+ +-----> |   nginx   | +-----> |    nodejs    | |
# | client |  HTTPS  |0.0.0.0:80 |   HTTP  |              | |
# +--------+ <-----+ |0.0.0.0:443| <-----+ |localhost:8080| |
#                    +----+------+         +--------------+ |
#                         +---------------------------------+

# The upstream is commonly called 'backend' instead of 'nodejs' 
# Defines a group of servers. Servers can listen on different ports.
# https://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream
upstream nodejs {
  server localhost:8080;
}

# generated 2020-06-20, Mozilla Guideline v5.4, nginx 1.17.7, OpenSSL 1.1.1d, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=intermediate&openssl=1.1.1d&guideline=5.4

# --------- MOZILLA'S SUGGESTED SETUP ----------

# Listen to any HTTP request and redirect to HTTPS. 
server {
  listen 80;
  listen [::]:80;
  server_name www.example.com example.com;
  return 301 https://$host$request_uri;
}

# Handle all HTTPS requests 
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  # -------- GET SSL CERTIFICATES (RUN AS ROOT) ----------

  # Generate SSL certificates using certbot
  # $ certbot certonly --webroot -d <insert-domain.com> -w /path/to/public/directory
  # This will generate the ssl_certificate and ssl_certificate_key
  # without making any changes to our .conf file

  # Backup SSL certificates (SAFETY FIRST)
  # Compress and zip /letsencrypt directory and move zipped file to safe location
  # $ cd /etc/ && tar czf SSL_BACKUP.tar.gz letsencrypt/ && mv SSL_BACKUP.tar.gz /home/user && rm -f SSL_BACKUP.tar.gz
  # Put this into /root/SSH_BACKUP.sh (don't forget to add: #!/bin/bash in the first line of the script)
  # This script will be used to automatically run this command when the certificates
  # need to be renewed.

  # Fill in the <insert-domain.com> as seen below
  # $ vim /etc/nginx/conf.d/yourNginx.conf

  ssl_certificate /etc/letsencrypt/live/<insert-domain.com>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<insert-domain.com>/privkey.pem;

  # After saving the changes, MAKE SURE YOU MADE NO MISTAKES
  # $ nginx -t
  # CORRECT OUTPUT:
  # nginx: the configuration file /etc/nginx/nginx.conf syntax is ok  
  # nginx: configuration file /etc/nginx/nginx.conf test is successful

  # If and only if everything is okay, restart nginx
  # $ systemctl restart nginx

  # Optional: Check the nginx status after restart.
  # $ systemctl status nginx
  # You should see "Active: active (running)"

  # Create a cron job to automatically check and renew certificates
  # crontab -e
  # Paste the following line

  # # Check if SSL certificate needs to be renewed everyday at 3AM
  # 0 3 * * * certbot renew --post-hook "systemctl restart nginx && /root/SSH_BACKUP.sh"

  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m; # about 40000 sessions
  ssl_session_tickets off;

  # $ curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
  # ssl_dhparam /path/to/dhparam;

  # intermediate configuration
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;

  # HSTS (ngx_http_headers_module is required) (63072000 seconds)
  add_header Strict-Transport-Sec urity "max-age=63072000" always;

  # OCSP stapling (Optional for faster handshake)
  # ssl_stapling on;
  # ssl_stapling_verify on;
  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

  # replace with the IP address of your resolver
  resolver 1.1.1.1;

  #------ REVERSE PROXY CONFIGURATION -------

  # This could be an IP and/or domain name
  server_name www.example.com example.com;
  
  # Serve static files
  # Use the absolute path to static folder
  root /path/to/public/directory;

  location / {
    # If found serve a static file,
    # else redirect to node app
    try_files $uri @nodejs;
  }

  # Upstream
  location @nodejs {
    proxy_redirect off;
    proxy_http_version 1.1;

    # All requests for '/' are passed to any of the servers
    # listed in the upstream <insert_name> object.
    proxy_pass http://nodejs;

    # Pass data AS SEEN BY NGINX to the NODE APP
    proxy_set_header Host $host;

    # Request headers
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Client IP (for analytics or recommendations)
    proxy_set_header X-Real-IP $remote_addr;
  }
}