# THIS IS A REVERSE PROXY SETUP USING NGINX AND NODEJS (HTTPS ENABLED)

#                         +-------------------------------+
#                         |             SERVER            |
#                         |                               |
#                         | +----------- +--------------+ |
#                         | |    HTTP    | static files | |
#                         | |  +-------> +--------------+ |
#                         | v  |                          |
# +--------+ +-----> +----+-+--++ +----> +--------------+ |
# | client |  HTTPS  |  nginx   |  HTTP  |    nodejs    | |
# +--------+ <-----+ |0.0.0.0:80| <----+ |localhost:8080| |
#                    +----+-----+        +--------------+ |
#                         |                               |
#                         +-------------------------------+


# generated 2020-06-20, Mozilla Guideline v5.4, nginx 1.17.7, OpenSSL 1.1.1d, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=intermediate&openssl=1.1.1d&guideline=5.4

# Defines a group of servers. Servers can listen on different ports.
# https://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream
# The upstream is commonly called 'backend' instead of 'nodejs' 
upstream nodejs {
  server localhost:8080;
}

server {
  listen 80;
  listen [::]:80;
  server_name www.example.com example.com;
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  ssl_certificate /path/to/signed_cert_plus_intermediates;
  ssl_certificate_key /path/to/private_key;
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
  ssl_session_tickets off;

  # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
  ssl_dhparam /path/to/dhparam;

  # intermediate configuration
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;

  # HSTS (ngx_http_headers_module is required) (63072000 seconds)
  add_header Strict-Transport-Security "max-age=63072000" always;

  # OCSP stapling (Optional for faster handshake)
  # ssl_stapling on;
  # ssl_stapling_verify on;
  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

  # replace with the IP address of your resolver
  resolver 1.1.1.1;

  #------ CUSTOM CONFIGURATION -------

  # This could be an IP and/or domain name
  server_name www.example.com example.com;
  
  # Serve static files
  # Use the absolute path to static folder
  root /path/to/public/directory;

  location / {
    # If found serve a static file,
    # else redirect to node app
    try_files $uri @nodejs;
  }

  # Upstream
  location @nodejs {
    proxy_redirect off;
    proxy_http_version 1.1;

    # All requests for '/' are passed to any of the servers
    # listed in the upstream <insert_name> object.
    proxy_pass http://nodejs;

    # Pass data AS SEEN BY NGINX to the NODE APP
    proxy_set_header Host $host;

    # Request headers
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Client IP (for analytics or recommendations)
    proxy_set_header X-Real-IP $remote_addr;
  }
}